!function(){"use strict";
/**!
     @preserve Carbonium 0.1
     @copyright 2020 Edwin Martin
     @license MIT
     */function t(t,e){const i=(e||document).querySelectorAll(t);return new Proxy(i,n)}let e;const n={get(t,i){let s=null;if(i==Symbol.iterator)return function*(){for(let e=0;e<t.length;e++)yield t[e]};if("style"==i||"classList"==i){e=t;const s=Reflect.get(document.body,i);return new Proxy(s,n)}let o=null;if(t instanceof CSSStyleDeclaration&&(s=Reflect.get(document.body.style,i),o="style"),t instanceof DOMTokenList&&(s=Reflect.get(document.body.classList,i),o="classList"),o)return"function"==typeof s?new Proxy(s,{apply:function(t,i,s){return e.forEach(e=>{Reflect.apply(t,e[o],s)}),new Proxy(e,n)}}):s;if(Array.prototype.hasOwnProperty(i)){const t=Reflect.get(Array.prototype,i);if("function"==typeof t)return new Proxy(t,{apply:function(t,e,i){const s=Reflect.apply(t,e,i);return new Proxy(void 0!==s?s:e,n)}})}return t.length>0?i in t[0]&&(s=Reflect.get(t[0],i)):i in document.body&&(s=Reflect.get(document.body,i)),s?"function"==typeof s?new Proxy(s,{apply:function(t,e,n){let i=null,s=!0;for(const o of e){const e=Reflect.apply(t,o,n);s&&(i=e,s=!1)}return null!=i&&null!=i?i:e}}):s:Reflect.get(t,i)},set:(t,e,n)=>("forEach"in t?t.forEach(t=>{Reflect.set(t,e,n)}):Reflect.set(t,e,n),!0)};class i{constructor(){this.subscribers=new Set,this.subscribersHot=new Set,this.dispatched=!1,this.hot=!1}dispatch(t){const e=this.val;this.val=t,this.dispatched=!0,this.subscribers.forEach(n=>n(t,e))}subscribeNext(t){return this.subscribers.add(t),this.notifyHotSubscribers(),{unsubscribe:()=>{this.subscribers.delete(t)}}}subscribe(t){return this.dispatched&&t(this.val),this.subscribeNext(t)}unsubscribe(t){this.subscribers.delete(t),this.notifyHotSubscribers()}notifyHotSubscribers(){this.subscribers.size>0!=this.hot&&(this.hot=this.subscribers.size>0,this.subscribersHot.forEach(t=>t(this.hot)))}subscribeHot(t){return this.subscribersHot.add(t),{unsubscribe:()=>{this.subscribersHot.delete(t)}}}clear(){this.subscribers.clear(),this.subscribersHot.clear()}value(){return this.val}promise(){return new Promise(t=>{const e=this.subscribe((function(n){e.unsubscribe(),t(n)}))})}map(t){const e=new i,n=n=>{e.dispatch(t(n))};return e.subscribeHot(t=>{t?this.subscribe(n):this.unsubscribe(n)}),e}filter(t){const e=new i,n=n=>{t(n)&&e.dispatch(n)};return e.subscribeHot(t=>{t?this.subscribe(n):this.unsubscribe(n)}),e}}function s(t,e){const n=new i,s=t=>{n.dispatch(t)};return n.subscribeHot(n=>{n?t.addEventListener(e,s,!1):t.removeEventListener(e,s,!1)}),n}class o extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: flex;\n          background: #7e7e7e;\n        }\n        #canvas{\n          flex: 1 1;\n          margin-left: var(--width-mod, 0);\n        }\n      </style>\n      \n      <canvas id="canvas"></canvas>\n    '}connectedCallback(){if(this.dimension$=new i,this.click$=new i,this.canvasDomElement=t("#canvas",this.shadowRoot),this.canvasDomElement.getContext){try{let t=this.canvasDomElement.getBoundingClientRect();this.offscreen=new OffscreenCanvas(t.width,t.height),this.ctx=this.offscreen.getContext("2d",{alpha:!1}),this.ctxOffscreen=this.canvasDomElement.getContext("bitmaprenderer")}catch(t){this.ctx=this.canvasDomElement.getContext("2d",{alpha:!1})}this.setCellSize(11),this.calculateDimensions()}}init(t,e,n){t.subscribe(t=>{this.draw(t)}),e.subscribe(()=>{this.calculateDimensions()}),n.subscribe(t=>{this.setCellSize(t)}),this.canvasDomElement.addEventListener("click",t=>{this.action(t)})}draw(t){const e=this.ctx,n=this.cellSize;e.fillStyle="#7e7e7e",e.lineWidth=1,e.fillRect(0,0,this.pixelWidth+this.cellSize,this.pixelHeight),e.strokeStyle="#999";for(let t=0;t<=this.pixelWidth;t+=this.cellSize)e.beginPath(),e.moveTo(t+.5,0),e.lineTo(t+.5,this.pixelHeight),e.stroke();for(let t=this.cellSize;t<this.pixelHeight;t+=this.cellSize)e.beginPath(),e.moveTo(0,t+.5),e.lineTo(this.pixelWidth,t+.5),e.stroke();if(e.fillStyle="yellow",e.lineWidth=1,t.forEach((function(t){e.fillRect(t[0]*n+1,t[1]*n+1,n-1,n-1)})),this.ctxOffscreen){const t=this.offscreen.transferToImageBitmap();this.ctxOffscreen.transferFromImageBitmap(t)}}calculateDimensions(){const t=this.canvasDomElement.getBoundingClientRect(),e=document.documentElement.clientWidth,n=t.height,i=e%this.cellSize/2;this.canvasDomElement.style.setProperty("--width-mod",i+"px"),this.pixelWidth=this.canvasDomElement.width=e,this.pixelHeight=this.canvasDomElement.height=n-n%this.cellSize,this.ctxOffscreen&&(this.offscreen=new OffscreenCanvas(this.pixelWidth,this.pixelHeight),this.ctx=this.offscreen.getContext("2d",{alpha:!1})),this.setDimension(Math.floor(this.pixelWidth/this.cellSize),Math.floor(this.pixelHeight/this.cellSize))}action(t){const e=this.canvasDomElement.getBoundingClientRect(),n={cellX:Math.floor((t.clientX-e.left-2)/this.cellSize),cellY:Math.floor((t.clientY-e.top-5)/this.cellSize)};this.click$.dispatch(n)}setCellSize(t){this.cellSize=t,this.setDimension(Math.floor(this.pixelWidth/t),Math.floor(this.pixelHeight/t))}setDimension(t,e){t&&e&&(this.width=t,this.height=e,this.dimension$.dispatch({width:t,height:e}))}}customElements.define("gof-canvas",o);class a extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          position: absolute;\n          top: 150px;\n          left: 10vw;\n          width: 80vw;\n          height: calc(100vh - 300px);\n          background: white;\n          border: 1px solid #666;\n          box-shadow: #666 5px 5px 5px;\n          z-index: 2000;\n        }\n        \n        .info-content {\n          overflow: scroll;\n          overflow-scrolling: touch;\n          -webkit-overflow-scrolling: touch;\n          height: calc(100vh - 300px);\n          padding: 1em;\n        }\n        \n        .close-button {\n          position: absolute;\n          width: 22px;\n          height: 20px;\n          right: 0.5em;\n          top: 0.5em;\n          background: url(pix/close.svg) no-repeat;\n        }\n        \n        section {\n          background: white;\n        }\n      </style>\n      \n      <section>\n        <button class="close-button" data-close aria-label="Close"></button>\n        <div class="info-content">\n          <slot></slot>\n          <p class="center">\n            <button data-close>Close</button>\n          </p>\n        </div>\n      </section>\n    '}connectedCallback(){t("[data-close]",this.shadowRoot).addEventListener("click",()=>{this.close()}),document.documentElement.addEventListener("keyup",t=>{"Escape"==t.key&&this.close()}),document.documentElement.addEventListener("click",t=>{t.target.classList.contains("whitebox")&&this.close()}),document.documentElement.addEventListener("focusout",e=>{if(null!=event.target.closest("gof-info"))return t("[data-close]",this.shadowRoot).focus(),!1})}init(e){e.subscribe(()=>{this.removeAttribute("hidden"),document.body.classList.add("whitebox"),t("[data-close]",this.shadowRoot).focus()})}close(){this.setAttribute("hidden",""),document.body.classList.remove("whitebox")}}customElements.define("gof-info",a);class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: flex;\n          justify-content:  center;\n          flex-wrap: wrap;\n          align-items:  center;\n        }\n        \n        img {\n          vertical-align: bottom;\n          margin-left: 30px;\n        }\n        \n        :host > * {\n          margin: 0 5vw;\n        }\n        \n        form > * {\n          margin: 10px 0;\n        }\n        \n        input[type="range"] {\n          width: 80px;\n        }\n        \n        .generation {\n          font-family: helvetica, arial, sans-serif;\n          font-size: smaller;\n          margin-left: 2em;\n        }\n        \n        nowrap {\n          white-space: nowrap;\n        }\n        \n        nowrap > * {\n          vertical-align: middle;\n        }\n      </style>\n      \n      <form>\n        <select id="shapes" aria-label="Select predefined shape">\n        </select>\n        <input id="next" type="button" value="Next">\n        <input id="start" type="button" value="Start">\n        <label class="generation" title="Generations" aria-label="Generations">0</label>\n        <nowrap>\n          <img src="pix/speeddial.svg" alt="" width="20" height="20">\n          <input id="speed" type="range" min="0" max="100" value="50" title="Speed dial" aria-label="Speed dial">\n        </nowrap>\n        <nowrap>\n          <img src="pix/grid.svg" alt="" width="20" height="20">\n          <input id="size" type="range" min="0" max="100" value="58" title="Grid size" aria-label="Grid size">\n        </nowrap>\n        <input id="info" type="button" value="Explanation">\n      </form>\n    '}connectedCallback(){this.started=!1,this.timer=null,this.generation=0,this.generationElement=t(".generation",this.shadowRoot),this.collection=this.getCollection(),this.newShape$=new i,this.nextShape$=new i,this.nextGeneration$=new i,this.resize$=s(window,"resize")}init(e,n){this.redraw$=e,this.info$=s(t("#info",this.shadowRoot),"click"),n.subscribe(()=>{this.setGeneration(0)});const i=t("#shapes",this.shadowRoot);this.collection.forEach(t=>{const e=document.createElement("option");e.text=t.name,i.appendChild(e)}),i.addEventListener("change",t=>{this.setGeneration(0),this.newShape$.dispatch(this.collection[t.target.selectedIndex].data)}),t("#shapes",this.shadowRoot).selectedIndex=1,this.newShape$.dispatch(this.collection[1].data),t("#next",this.shadowRoot).addEventListener("click",()=>{this.nextGeneration$.dispatch()}),this.size$=s(t("#size",this.shadowRoot),"input").map(t=>Math.round(2+.38*Number(t.target.value))),this.size$.dispatch(24);const o=t("#speed",this.shadowRoot);function a(t){return 1e3-99*Math.sqrt(Number(t.value))}this.speed=a(o),o.addEventListener("input",function(){this.speed=a(o),this.started&&this.animate1()}.bind(this));const c=t("#start",this.shadowRoot);c.addEventListener("click",()=>{this.started=!this.started,this.started?(c.value="Stop",this.animate1()):(c.value="Start",clearInterval(this.timer))}),this.nextGeneration$.subscribe(()=>{let t=this.redraw$.value();t=function(t){let e={},n=[];t.forEach(t=>{let n;n="c"+(t[0]-1)+","+(t[1]-1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0]-1,t[1]-1]},n="c"+t[0]+","+(t[1]-1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0],t[1]-1]},n="c"+(t[0]+1)+","+(t[1]-1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0]+1,t[1]-1]},n="c"+(t[0]-1)+","+t[1],e[n]?e[n].n++:e[n]={n:1,cell:[t[0]-1,t[1]]},n="c"+(t[0]+1)+","+t[1],e[n]?e[n].n++:e[n]={n:1,cell:[t[0]+1,t[1]]},n="c"+(t[0]-1)+","+(t[1]+1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0]-1,t[1]+1]},n="c"+t[0]+","+(t[1]+1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0],t[1]+1]},n="c"+(t[0]+1)+","+(t[1]+1),e[n]?e[n].n++:e[n]={n:1,cell:[t[0]+1,t[1]+1]}}),t.forEach((function(t,n){const i="c"+t[0]+","+t[1];e[i]&&(e[i].populated=!0)}));for(const t in e)(2==e[t].n&&e[t].populated||3==e[t].n)&&n.push(e[t].cell);return n}(t),this.nextShape$.dispatch(t),this.setGeneration(this.generation+1)})}getCollection(){return[{name:"Clear",data:[]},{name:"Glider",data:[[1,0],[2,1],[2,2],[1,2],[0,2]]},{name:"Small Exploder",data:[[0,1],[0,2],[1,0],[1,1],[1,3],[2,1],[2,2]]},{name:"Exploder",data:[[0,0],[0,1],[0,2],[0,3],[0,4],[2,0],[2,4],[4,0],[4,1],[4,2],[4,3],[4,4]]},{name:"10 Cell Row",data:[[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0]]},{name:"Lightweight spaceship",data:[[0,1],[0,3],[1,0],[2,0],[3,0],[3,3],[4,0],[4,1],[4,2]]},{name:"Tumbler",data:[[0,3],[0,4],[0,5],[1,0],[1,1],[1,5],[2,0],[2,1],[2,2],[2,3],[2,4],[4,0],[4,1],[4,2],[4,3],[4,4],[5,0],[5,1],[5,5],[6,3],[6,4],[6,5]]},{name:"Gosper Glider Gun",data:[[0,2],[0,3],[1,2],[1,3],[8,3],[8,4],[9,2],[9,4],[10,2],[10,3],[16,4],[16,5],[16,6],[17,4],[18,5],[22,1],[22,2],[23,0],[23,2],[24,0],[24,1],[24,12],[24,13],[25,12],[25,14],[26,12],[34,0],[34,1],[35,0],[35,1],[35,7],[35,8],[35,9],[36,7],[37,8]]}]}setGeneration(t){this.generation=t,this.generationElement.innerHTML=t.toString(10)}animate1(){clearInterval(this.timer),this.timer=setInterval(()=>{this.nextGeneration$.dispatch()},this.speed)}}customElements.define("gof-controls",c);class r{constructor(){this.redraw$=new i,this.current=[]}init(t,e,n,i,s,o){s.subscribe((t,e)=>{this.offset(t,e)}),e.subscribe(t=>{this.current=t.map(t=>[t[0],t[1]]),this.center(s.value()),this.redraw()}),n.subscribe(t=>{this.current=t,this.redraw()}),i.subscribe(()=>{this.redraw()}),o.subscribe(t=>{this.toggle([t.cellX,t.cellY])})}redraw(){this.redraw$.dispatch(this.current)}center(t){let e=0,n=0;this.current.forEach(t=>{t[0]>e&&(e=t[0]),t[1]>n&&(n=t[1])});const i=Math.round((t.width-e)/2),s=Math.round((t.height-n)/2);this.current.forEach(t=>{t[0]+=i,t[1]+=s})}offset(t,e){if(e&&t.width!=e.width&&t.height!=e.height){const n=Math.round((t.width-e.width)/2.001),i=Math.round((t.height-e.height)/2.001);this.current.forEach(t=>{t[0]+=n,t[1]+=i}),this.redraw()}}toggle(t){const e=this.current.findIndex((e,n)=>e[0]==t[0]&&e[1]==t[1]);-1==e?this.current.push(t):this.current.splice(e,1),this.redraw()}}document.addEventListener("DOMContentLoaded",()=>{const e=t("gof-canvas"),n=t("gof-controls"),i=t("gof-info"),s=new r;n.init(s.redraw$,e.click$),e.init(s.redraw$,n.resize$,n.size$),s.init(n.size$,n.newShape$,n.nextShape$,n.resize$,e.dimension$,e.click$),i.init(n.info$),console.log(o&&a&&c&&"Game of Life")})}();
//# sourceMappingURL=bundle.min.js.map
